generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
  accounts  Account[]
  connections Connection[]
  costs     Cost[]
  clusters  Cluster[]
  recommendations Recommendation[]
  syncRuns  SyncRun[]
}

model User {
  id         String   @id @default(cuid())
  tenantId   String
  email      String   @unique
  authProvider String  // appsdk | native
  passwordHash String? // for native JWT mode
  role       String    // admin | user
  profile    Json?
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model Connection {
  id            String   @id @default(cuid())
  tenantId      String
  provider      String   // AWS | Azure | GCP
  displayName   String
  secrets_provider String // apps-sdk | aws-kms | gcp-sm | azure-kv
  secret_ref    String
  // Provider-specific identifiers
  roleArn       String?  // AWS
  externalId    String?  // AWS generated per-tenant
  subscriptionId String? // Azure
  azureTenantId  String? // Azure AAD
  projectId     String?  // GCP
  status        String   // active | error | pending
  createdAt     DateTime @default(now())
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
}

model Account {
  id         String   @id @default(cuid())
  tenantId   String
  provider   String
  externalId String
  name       String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  costs      Cost[]
}

model Service {
  id       String  @id @default(cuid())
  provider String
  code     String
  name     String
  @@unique([provider, code])
}

model Cost {
  id         String   @id @default(cuid())
  tenantId   String
  provider   String
  accountId  String
  serviceId  String
  date       DateTime
  billed     Decimal  @db.Decimal(18, 4)
  effective  Decimal  @db.Decimal(18, 4)
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  account    Account  @relation(fields: [accountId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
  @@unique([tenantId, date, provider, accountId, serviceId])
  @@index([tenantId, date])
}

model Cluster {
  id        String   @id @default(cuid())
  tenantId  String
  provider  String
  accountId String
  name      String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

model Recommendation {
  id         String   @id @default(cuid())
  tenantId   String
  provider   String
  accountId  String?
  serviceId  String?
  kind       String
  details    Json?
  savingPotential Decimal @db.Decimal(18, 4)
  status     String   // open | accepted | dismissed
  createdAt  DateTime @default(now())
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}

model SyncRun {
  id           String   @id @default(cuid())
  tenantId     String
  provider     String
  connectionId String
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  status       String   // success | error
  stats        Json?
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
}

